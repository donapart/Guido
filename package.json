{
  "name": "model-router",
  "displayName": "Guido Model Router",
  "description": "Intelligenter AI Model Router mit Sprachsteuerung und experimentellen Features",
  "version": "0.2.2",
  "publisher": "model-router",
  "repository": {
    "type": "git",
    "url": "https://github.com/model-router/guido-model-router.git"
  },
  "enabledApiProposals": [],
  "galleryBanner": {
    "color": "#12578a",
    "theme": "dark"
  },
  "extensionKind": ["ui", "workspace"],
  "engines": {
    "vscode": "^1.99.0"
  },
  "categories": [
    "Other",
    "Machine Learning"
  ],
  "icon": "extension-icon-512.png",
  "keywords": [
    "ai",
    "model",
    "router",
    "voice",
    "control",
    "experimental",
    "guido"
  ],
  "main": "./out/extension.js",
  "activationEvents": [
    "onStartupFinished"
  ],
  "contributes": {
    "commands": [
      {
        "command": "modelRouter.chat",
        "title": "Model Router: Chat",
        "category": "Model Router"
      },
      {
        "command": "modelRouter.openConfig",
        "title": "Model Router: Open Config",
        "category": "Model Router"
      },
      {
        "command": "modelRouter.estimateCost",
        "title": "Model Router: Estimate Cost",
        "category": "Model Router"
      },
      {
        "command": "modelRouter.startVoiceControl",
        "title": "Model Router: Start Voice Control (Guido)",
        "category": "Model Router"
      },
      {
        "command": "modelRouter.stopVoiceControl",
        "title": "Model Router: Stop Voice Control",
        "category": "Model Router"
      },
      {
        "command": "modelRouter.toggleVoiceControl",
        "title": "Model Router: Toggle Voice Control",
        "category": "Model Router"
      },
      {
        "command": "modelRouter.voiceSettings",
        "title": "Model Router: Voice Settings",
        "category": "Model Router"
      },
      {
        "command": "modelRouter.voicePermissions",
        "title": "Model Router: Voice Permissions",
        "category": "Model Router"
      },
      {
        "command": "modelRouter.experimental.emotionAnalysis",
        "title": "ðŸ§ª Experimental: Emotion Analysis",
        "category": "Model Router Experimental"
      },
      {
        "command": "modelRouter.experimental.contextEnhancement",
        "title": "ðŸ§ª Experimental: Context Enhancement",
        "category": "Model Router Experimental"
      },
      {
        "command": "modelRouter.experimental.adaptiveRouting",
        "title": "ðŸ§ª Experimental: Adaptive Routing",
        "category": "Model Router Experimental"
      },
      {
        "command": "modelRouter.experimental.intentRecognition",
        "title": "ðŸ§ª Experimental: Intent Recognition",
        "category": "Model Router Experimental"
      },
      {
        "command": "modelRouter.experimental.personalityAdaptation",
        "title": "ðŸ§ª Experimental: Personality Adaptation",
        "category": "Model Router Experimental"
      },
      {
        "command": "modelRouter.experimental.multilingualProcessing",
        "title": "ðŸ§ª Experimental: Multilingual Processing",
        "category": "Model Router Experimental"
      },
      {
        "command": "modelRouter.experimental.performanceMetrics",
        "title": "ðŸ§ª Experimental: Performance Metrics",
        "category": "Model Router Experimental"
      },
      {
        "command": "modelRouter.experimental.showUI",
        "title": "ðŸ§ª Experimental: Show UI",
        "category": "Model Router Experimental"
      },
      {
        "command": "modelRouter.experimental.testFeatures",
        "title": "ðŸ§ª Experimental: Test All Features",
        "category": "Model Router Experimental"
      },
      {
        "command": "modelRouter.showLogs",
        "title": "Model Router: Show Logs",
        "category": "Model Router"
      },
      {
        "command": "modelRouter.clearLogs",
        "title": "Model Router: Clear Logs",
        "category": "Model Router"
      }
    ],
    "views": {
      "explorer": [
        {
          "id": "guidoVoiceControl",
          "name": "Guido Voice Control",
          "when": "modelRouter.voiceEnabled"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "guido",
          "title": "Guido",
          "icon": "$(mic)"
        }
      ]
    },
    "configuration": {
      "title": "Model Router",
      "properties": {
        "modelRouter.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable Model Router"
        },
        "modelRouter.defaultModel": {
          "type": "string",
          "default": "gpt-4o-mini",
          "description": "Default AI model to use"
        },
        "modelRouter.voice.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable voice control features"
        },
        "modelRouter.voice.wakeWord": {
          "type": "string",
          "default": "Guido",
          "description": "Wake word for voice control"
        },
        "modelRouter.voice.language": {
          "type": "string",
          "default": "de",
          "description": "Voice recognition language"
        },
        "modelRouter.experimental.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable experimental features"
        },
        "modelRouter.experimental.emotionDetection": {
          "type": "boolean",
          "default": true,
          "description": "Enable emotion detection"
        },
        "modelRouter.experimental.contextAwareness": {
          "type": "boolean",
          "default": true,
          "description": "Enable context awareness"
        },
        "modelRouter.experimental.adaptiveInterface": {
          "type": "boolean",
          "default": true,
          "description": "Enable adaptive interface"
        },
        "modelRouter.experimental.multilingual": {
          "type": "boolean",
          "default": true,
          "description": "Enable multilingual processing"
        },
        "modelRouter.experimental.personalityAdaptation": {
          "type": "boolean",
          "default": true,
          "description": "Enable personality adaptation"
        },
        "modelRouter.openrouterApiKey": {
          "type": "string",
          "default": "",
          "description": "OpenRouter API Key for universal model access"
        },
        "modelRouter.huggingfaceApiKey": {
          "type": "string",
          "default": "",
          "description": "Hugging Face API Key for Hugging Face models"
        },
        "modelRouter.updates.autoCheck": {
          "type": "boolean",
          "default": true,
          "description": "Automatically check for updates"
        },
        "modelRouter.updates.notifyOnStart": {
          "type": "boolean",
          "default": true,
          "description": "Notify about updates on startup"
        },
        "modelRouter.profiles.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable model profiles"
        },
        "modelRouter.profiles.defaultProfile": {
          "type": "string",
          "default": "standard",
          "description": "Default model profile"
        },
        "modelRouter.presets.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable presets for quick configuration"
        },
        "modelRouter.ui.showWelcomeOnStartup": {
          "type": "boolean",
          "default": true,
          "description": "Show welcome screen on startup"
        },
        "modelRouter.voice.sensitivity": {
          "type": "string",
          "default": "medium",
          "enum": ["low", "medium", "high"],
          "description": "Voice recognition sensitivity"
        },
        "modelRouter.voice.feedbackSounds": {
          "type": "boolean",
          "default": true,
          "description": "Play feedback sounds for voice commands"
        },
        "modelRouter.performance.cacheResults": {
          "type": "boolean",
          "default": true,
          "description": "Cache model results for performance"
        },
        "modelRouter.logs.detailLevel": {
          "type": "string",
          "default": "normal",
          "enum": ["minimal", "normal", "verbose", "debug"],
          "description": "Log detail level"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "package": "vsce package"
  },
  "devDependencies": {
    "@types/jest": "^29.5.8",
    "@types/node": "20.x",
    "@types/vscode": "^1.99.0",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0",
    "eslint": "^8.0.0",
    "jest": "^29.7.0",
    "ts-jest": "^29.1.1",
    "typescript": "^5.0.0",
    "vsce": "^2.15.0"
  },
  "dependencies": {
    "@types/js-yaml": "^4.0.9",
    "axios": "^1.6.0",
    "js-yaml": "^4.1.0",
    "ws": "^8.14.0",
    "yaml": "^2.8.1"
  },
  "jest": {
    "preset": "ts-jest",
    "testEnvironment": "node",
    "roots": [
      "<rootDir>/test"
    ],
    "testMatch": [
      "**/__tests__/**/*.ts",
      "**/*.(test|spec).ts"
    ],
    "testPathIgnorePatterns": [
      "<rootDir>/test/integration/",
      "<rootDir>/test/providers/"
    ],
    "collectCoverageFrom": [
      "src/**/*.ts",
      "!src/**/*.d.ts",
      "!src/test/**"
    ],
    "coverageDirectory": "coverage",
    "coverageReporters": [
      "text",
      "lcov",
      "html"
    ],
    "setupFilesAfterEnv": [
      "<rootDir>/test/setup.ts"
    ]
  },
  "l10n": "./l10n"
}
